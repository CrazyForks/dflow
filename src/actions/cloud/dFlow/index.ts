'use server'

import axios from 'axios'
import { env } from 'env'

import { protectedClient } from '@/lib/safe-action'
import { CloudProviderAccount } from '@/payload-types'

import { VpsPlan } from './types'
import {
  connectDFlowAccountSchema,
  createSshKeyActionSchema,
  createSshKeysAndVpsActionSchema,
  createVpsOrderActionSchema,
  getDFlowPlansActionSchema,
} from './validator'

export const connectDFlowAccountAction = protectedClient
  .metadata({
    actionName: 'connectAWSAccountAction',
  })
  .schema(connectDFlowAccountSchema)
  .action(async ({ clientInput, ctx }) => {
    const { accessToken, name, id } = clientInput

    const { userTenant, payload } = ctx
    let response: CloudProviderAccount

    if (id) {
      response = await payload.update({
        collection: 'cloudProviderAccounts',
        id,
        data: {
          type: 'dFlow',
          dFlowDetails: {
            accessToken,
          },
          name,
        },
      })
    } else {
      response = await payload.create({
        collection: 'cloudProviderAccounts',
        data: {
          type: 'dFlow',
          dFlowDetails: {
            accessToken,
          },
          tenant: userTenant.tenant,
          name,
        },
      })
    }

    return response
  })

export const getDFlowPlansAction = protectedClient
  .metadata({
    actionName: 'getDFlowPlansAction',
  })
  .schema(getDFlowPlansActionSchema)
  .action(async ({ clientInput }) => {
    const { accessToken } = clientInput

    const vpsPlansRes = await axios.get(`${env.DFLOW_CLOUD_URL}/api/vpsPlans`, {
      headers: {
        Authorization: `${env.DFLOW_CLOUD_AUTH_SLUG} API-Key ${accessToken}`,
      },
    })

    const vpsPlans = vpsPlansRes?.data?.docs ?? []

    return vpsPlans as VpsPlan[]
  })

export const generateDFlowAccessTokenAction = protectedClient
  .metadata({
    actionName: 'generateDFlowAccessTokenAction',
  })
  .action(async ({ ctx }) => {
    const { user, payload, userTenant } = ctx

    // TODO: Need the to tell the user to set a password
    // TODO: Need to check if the user already exists
    const { data: createdUserRes } = await axios.post(
      `${env.DFLOW_CLOUD_URL}/api/internal/createUser`,
      {
        email: user.email,
        username: user.username,
        password: 'changeme',
      },
      {
        headers: {
          Authorization: `${env.DFLOW_CLOUD_AUTH_SLUG} API-Key ${env.DFLOW_CLOUD_API_KEY}`,
        },
      },
    )
    const { data: createdUser } = createdUserRes

    await payload.create({
      collection: 'cloudProviderAccounts',
      data: {
        type: 'dFlow',
        dFlowDetails: {
          accessToken: createdUser?.apiKey,
        },
        tenant: userTenant.tenant,
        name: 'Auto Generated by dFlow',
      },
    })

    return createdUser
  })

export const createSshKeysAndVpsAction = protectedClient
  .metadata({
    actionName: 'createSshKeysAndVpsAction',
  })
  .schema(createSshKeysAndVpsActionSchema)
  .action(async ({ clientInput, ctx }) => {
    const { sshKeys, vps } = clientInput
    const { userTenant, payload } = ctx

    const { docs: dFlowAccount } = await payload.find({
      collection: 'cloudProviderAccounts',
      pagination: false,
      where: {
        and: [
          {
            type: {
              equals: 'dFlow',
            },
          },
          {
            'tenant.slug': {
              equals: userTenant.tenant?.slug,
            },
          },
        ],
      },
    })
    const token = dFlowAccount[0].dFlowDetails?.accessToken

    let createdSecretRes
    try {
      createdSecretRes = await axios.post(
        `${env.DFLOW_CLOUD_URL}/api/secrets`,
        {
          name: sshKeys[0].name,
          type: 'ssh',
          publicKey: sshKeys[0].publicSshKey,
        },
        {
          headers: {
            Authorization: `${env.DFLOW_CLOUD_AUTH_SLUG} API-Key ${token}`,
          },
        },
      )

      console.dir({ createdSecretRes }, { depth: Infinity })
    } catch (error) {
      console.log({ error })
    }

    // const { data: createdVpsOrderRes } = await axios.post(
    //   `${env.DFLOW_CLOUD_URL}/api/vspOrders`,
    //   {
    //     image: {
    //       imageId: 'afecbb85-e2fc-46f0-9684-b46b1faf00bb',
    //       priceId: 'price_1R1VOXP2ZUGTn5p0TMvSrTTK',
    //     },
    //     product: {
    //       productId: 'V92',
    //       priceId: 'price_1RNq0hP2ZUGTn5p0eq28s0op',
    //     },
    //     displayName: vps.name,
    //     region: {
    //       code: 'EU',
    //       priceId: 'price_1R1VHbP2ZUGTn5p0FeXm5ykp',
    //     },
    //     card: '',
    //     defaultUser: 'root',
    //     rootPassword: 141086,
    //     period: {
    //       months: 1,
    //       priceId: 'price_1RNq7DP2ZUGTn5p00casstTj',
    //     },
    //     sshKeys: vps.sshKeys,
    //     plan: '6821988ea2def4c82c86cf4f',
    //     addOns: {},
    //   },
    //   {
    //     headers: {
    //       Authorization: `${env.DFLOW_CLOUD_AUTH_SLUG} API-Key ${token}`,
    //     },
    //   },
    // )

    return { success: true }
  })

export const createSshKeyAction = protectedClient
  .metadata({
    actionName: 'createSshKeyAction',
  })
  .schema(createSshKeyActionSchema)
  .action(async ({ ctx, clientInput }) => {
    const { token, name, publicSshKey } = clientInput

    const { data: createdSecretRes } = await axios.post(
      'https://contentql.io/api/secrets',
      {
        name,
        type: 'ssh',
        publicKey: publicSshKey,
      },
      {
        headers: {
          Authorization: `users API-Key ${token}`,
        },
      },
    )

    return createdSecretRes
  })

export const createVpsOrderAction = protectedClient
  .metadata({
    actionName: 'createVpsOrderAction',
  })
  .schema(createVpsOrderActionSchema)
  .action(async ({ ctx, clientInput }) => {
    const { token, name, sshKeys } = clientInput

    const { data: createdVpsOrderRes } = await axios.post(
      'https://contentql.io/api/vspOrders',
      {
        image: {
          imageId: 'afecbb85-e2fc-46f0-9684-b46b1faf00bb',
          priceId: 'price_1R1VOXP2ZUGTn5p0TMvSrTTK',
        },
        product: {
          productId: 'V92',
          priceId: 'price_1RNq0hP2ZUGTn5p0eq28s0op',
        },
        displayName: name,
        region: {
          code: 'EU',
          priceId: 'price_1R1VHbP2ZUGTn5p0FeXm5ykp',
        },
        card: '',
        defaultUser: 'root',
        rootPassword: 141086,
        period: {
          months: 1,
          priceId: 'price_1RNq7DP2ZUGTn5p00casstTj',
        },
        sshKeys,
        plan: '6821988ea2def4c82c86cf4f',
        addOns: {},
      },
      {
        headers: {
          Authorization: `users API-Key ${token}`,
        },
      },
    )

    return createdVpsOrderRes
  })

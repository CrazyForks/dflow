'use server'

import axios from 'axios'
import { env } from 'env'

import { protectedClient } from '@/lib/safe-action'
import { CloudProviderAccount } from '@/payload-types'

import { VpsPlan } from './types'
import {
  connectDFlowAccountSchema,
  createSshKeysAndVpsActionSchema,
} from './validator'

export const connectDFlowAccountAction = protectedClient
  .metadata({
    actionName: 'connectAWSAccountAction',
  })
  .schema(connectDFlowAccountSchema)
  .action(async ({ clientInput, ctx }) => {
    const { accessToken, name, id } = clientInput

    const { userTenant, payload } = ctx
    let response: CloudProviderAccount

    if (id) {
      response = await payload.update({
        collection: 'cloudProviderAccounts',
        id,
        data: {
          type: 'dFlow',
          dFlowDetails: {
            accessToken,
          },
          name,
        },
      })
    } else {
      response = await payload.create({
        collection: 'cloudProviderAccounts',
        data: {
          type: 'dFlow',
          dFlowDetails: {
            accessToken,
          },
          tenant: userTenant.tenant,
          name,
        },
      })
    }

    return response
  })

export const getDFlowPlansAction = protectedClient
  .metadata({
    actionName: 'getDFlowPlansAction',
  })
  .action(async () => {
    let vpsPlans: VpsPlan[] = []

    if (env.DFLOW_CLOUD_URL && env.DFLOW_CLOUD_API_KEY) {
      const response = await axios.get(`${env.DFLOW_CLOUD_URL}/api/vpsPlans`, {
        headers: {
          Authorization: `${env.DFLOW_CLOUD_AUTH_SLUG} API-Key ${env.DFLOW_CLOUD_API_KEY}`,
        },
      })

      vpsPlans = response?.data?.docs ?? []
    }

    return vpsPlans
  })

export const generateDFlowAccessTokenAction = protectedClient
  .metadata({
    actionName: 'generateDFlowAccessTokenAction',
  })
  .action(async ({ ctx }) => {
    const { user, payload, userTenant } = ctx

    // TODO: Need the to tell the user to set a password
    // TODO: Need to check if the user already exists
    const { data: createdUserRes } = await axios.post(
      `${env.DFLOW_CLOUD_URL}/api/internal/createUser`,
      {
        email: user.email,
        username: user.username,
        password: 'changeme',
      },
      {
        headers: {
          Authorization: `${env.DFLOW_CLOUD_AUTH_SLUG} API-Key ${env.DFLOW_CLOUD_API_KEY}`,
        },
      },
    )
    const { data: createdUser } = createdUserRes

    await payload.create({
      collection: 'cloudProviderAccounts',
      data: {
        type: 'dFlow',
        dFlowDetails: {
          accessToken: createdUser?.apiKey,
        },
        tenant: userTenant.tenant,
        name: 'Auto Generated by dFlow',
      },
    })

    return createdUser
  })

export const createSshKeysAndVpsAction = protectedClient
  .metadata({
    actionName: 'createSshKeysAndVpsAction',
  })
  .schema(createSshKeysAndVpsActionSchema)
  .action(async ({ clientInput, ctx }) => {
    const { sshKeys, vps } = clientInput
    const { userTenant, payload } = ctx
    const { addCreateVpsQueue } = await import(
      '@/queues/dFlow/addCreateVpsQueue'
    )

    console.log('inside Action....')

    const { docs: dFlowAccount } = await payload.find({
      collection: 'cloudProviderAccounts',
      pagination: false,
      where: {
        and: [
          {
            type: {
              equals: 'dFlow',
            },
          },
          {
            'tenant.slug': {
              equals: userTenant.tenant?.slug,
            },
          },
        ],
      },
    })

    if (!dFlowAccount || dFlowAccount.length === 0) {
      throw new Error('No dFlow account found for this tenant')
    }

    const token = dFlowAccount[0].dFlowDetails?.accessToken

    if (!token) {
      throw new Error('Invalid dFlow account: No access token found')
    }

    console.log('triggering queue...')
    await addCreateVpsQueue({
      sshKeys,
      vps,
      accountDetails: {
        id: dFlowAccount[0].id,
        accessToken: token,
      },
      tenant: userTenant.tenant,
    })
    console.log('queue done...')

    return {
      success: true,
      message:
        'VPS creation process started. You will receive updates on the progress.',
    }
  })
